// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.Joystick;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
    import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.PixyCamera;
import frc.robot.RobotContainer;
import io.github.pseudoresonance.pixy2api.Pixy2CCC.Block;
    

/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_VictorSPX leftMotor;
private WPI_VictorSPX rightMotor;
private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Boolean pixyChaseSteer = false;
    private double steeringAdjustment = 0.0;
    // private final I2C.Port i2cPort = I2C.Port.kOnboard;
    // private final ColorSensorV3 m_colorSensor = new ColorSensorV3(i2cPort);

    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftMotor = new WPI_VictorSPX(0);
 
 

rightMotor = new WPI_VictorSPX(3);
 
 

differentialDrive1 = new DifferentialDrive(leftMotor, rightMotor);
 addChild("DifferentialDrive1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(0.8);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        PixyCamera.initialize();
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putBoolean("pixyChaseSteer", pixyChaseSteer);
        if (pixyChaseSteer){
            Block b = PixyCamera.getBiggestBlock();
        
            if (b != null){
                double mid_x = b.getX() + (b.getWidth() / 2.0);
                SmartDashboard.putNumber("xposition", mid_x);
                if (mid_x > 160) {
                    steeringAdjustment =  1.0 * (mid_x - 160.0);
                } else {
                    steeringAdjustment = -1.0 * (160.0 - mid_x);
                }
            }  
            else {
                steeringAdjustment = 0;
            }
        }
        SmartDashboard.putNumber("adjustment", steeringAdjustment);
        // SmartDashboard.putNumber("see black line",  m_colorSensor.getIR());

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void driveWithStick(){
        Joystick stick = RobotContainer.getInstance().getJoystick1();
        SmartDashboard.putNumber("driving with ", steeringAdjustment);
        // if (pixyChaseSteer){
        //     RobotContainer.getInstance().m_driveTrain.differentialDrive1.
        //         arcadeDrive(steeringAdjustment/160.0 * 1.3,stick.getRightY());
        // } else {
        //     RobotContainer.getInstance().m_driveTrain.differentialDrive1.
        //         arcadeDrive(stick.getRightX(),stick.getRightY());
        // }
        double y = stick.getZ();
        double twist = stick.getY();
        differentialDrive1.arcadeDrive(y, twist, true);
    

    }

    public void pixyLightsToggle(){
        // Ask PixyCamera.java to toggle lights
        PixyCamera.toggleLights();
        
    }

    public void pixyToggleBlue(){
        // Ask PixyCamera.java to toggle seeing blue
    }

    public void pixyToggleRed(){
        // Ask PixyCamera.java to toggle seeing red
    }

    public void pixyChaseSteering(Boolean chase){
        pixyChaseSteer = chase;
    }
}
