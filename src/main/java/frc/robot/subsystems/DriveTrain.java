// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
    import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.PixyCamera;
import frc.robot.RobotContainer;
import io.github.pseudoresonance.pixy2api.Pixy2CCC.Block;
    

/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX leftMotor;
private WPI_TalonFX rightMotor;
private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Boolean pixyChaseSteering = false;
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftMotor = new WPI_TalonFX(1);
 
 

rightMotor = new WPI_TalonFX(2);
 
 

differentialDrive1 = new DifferentialDrive(leftMotor, rightMotor);
addChild("DifferentialDrive1",differentialDrive1);
differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(0.15);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        PixyCamera.initialize();
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        Block b = PixyCamera.getBiggestBlock();
        
        if (b != null){
            System.out.println(b.getX());
        }

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void driveWithStick(){
        XboxController stick = RobotContainer.getInstance().getXBoxController0();
        RobotContainer.getInstance().m_driveTrain.differentialDrive1.arcadeDrive(stick.getRightX(),stick.getRightY());
    }

    public void pixyLightsToggle(){
        // Ask PixyCamera.java to toggle lights
        
    }

    public void pixyToggleBlue(){
        // Ask PixyCamera.java to toggle seeing blue
    }

    public void pixyToggleRed(){
        // Ask PixyCamera.java to toggle seeing red
    }

    public void pixyChaseSteering(Boolean chase){
        pixyChaseSteering = chase;
    }